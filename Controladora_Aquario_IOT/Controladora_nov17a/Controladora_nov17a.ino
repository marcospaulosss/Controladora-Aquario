#include "arduino_secrets.h"
/// Biblioteca responsavel por requestes entre serviços.
#include <NTPClient.h>

//#include <WiFi.h> // for WiFi shield
//#include <WiFi101.h> // for WiFi 101 shield or MKR1000
#include <ESP8266WiFi.h>
#include <WiFiUdp.h>

#include "thingProperties.h"

// Configuração do wifi
const char *ssid     = "MARCOS_PAULO";
const char *password = "marcos3891";

// Configuração para buscar a data atual
WiFiUDP ntpUDP;
char daysOfTheWeek[7][12] = {"Sabado", "Domingo", "Segunda", "Terca", "Quarta", "Quinta", "Sexta"};
String months[12] = {"Janeiro", "Fevereiro", "Marco", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"};
// const long utcOffsetInSeconds = 3600;
NTPClient timeClient(ntpUDP, "south-america.pool.ntp.org", -10800);

/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/aa10c1de-27fa-443f-a79f-fa7848fc180f

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudTime second_now;
  String date_now;
  CloudTime hour_now;
  CloudTime minute_now;
  bool status;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

int LED = 13;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(115200);
  Serial.println("Iniciando controladora aquario marinho...");
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  Serial.println("Initialize configuracao...");
  pinMode(LED, OUTPUT);
  digitalWrite(LED, HIGH);

  setupWifi();
  timeClient.begin();
}

void loop() {
  ArduinoCloud.update();
  // Your code here

  Serial.println(status);

  getDateNow();

  delay(500);
}

void setupWifi() {
  WiFi.begin(ssid, password);
  while ( WiFi.status() != WL_CONNECTED ) {
    delay ( 500 );
    Serial.print ( "." );
  }
}

void getDateNow()  {
  timeClient.update();

  unsigned long epochTime = timeClient.getEpochTime();

  struct tm *ptm = gmtime ((time_t *)&epochTime);
  int monthDay = ptm->tm_mday - 1;
  int currentMonth = ptm->tm_mon + 1;
  String currentMonthName = months[currentMonth - 1];
  int currentYear = ptm->tm_year + 1900;
  String semana = daysOfTheWeek[timeClient.getDay()];
  String currentDate = semana + "-" + String(monthDay) + "/" + String(currentMonth) + "/" + String(currentYear);

  date_now = currentDate;
  hour_now = timeClient.getHours();
  minute_now = timeClient.getMinutes();
  second_now = timeClient.getSeconds();
}

/*
  Since HourNow is READ_WRITE variable, onHourNowChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHourNowChange()  {
  // Add your code here to act upon HourNow change
}

/*
  Since DateNow is READ_WRITE variable, onDateNowChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDateNowChange()  {
  // Add your code here to act upon DateNow change
}

/*
  Since MinuteNow is READ_WRITE variable, onMinuteNowChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMinuteNowChange()  {
  // Add your code here to act upon MinuteNow change
}

/*
  Since SecondNow is READ_WRITE variable, onSecondNowChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSecondNowChange()  {
  // Add your code here to act upon SecondNow change
}

/*
  Since Status is READ_WRITE variable, onStatusChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onStatusChange()  {
  // Add your code here to act upon Status change
  Serial.println("estou aqui");

  if (digitalRead(LED) == LOW) {
    digitalWrite(LED, HIGH);
    Serial.println("LIga a luz");
  } else {
    digitalWrite(LED, LOW);
    Serial.println("Apaga a luz");
  }
}